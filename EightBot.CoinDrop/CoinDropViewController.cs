// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using System.Threading.Tasks;

namespace EightBot.CoinDrop
{
	public partial class CoinDropViewController : UIViewController
	{
		private	UIDynamicAnimator animator;

		private UICollisionBehavior coinCollision
									, containerCollision = new UICollisionBehavior () { TranslatesReferenceBoundsIntoBoundary = true };

		private UIPushBehavior coinCatcherPush, redGemPush, greenGemPush, yellowGemPush;

		private UIGravityBehavior coinGravity = new UIGravityBehavior ();

		private RectangleF originalCoinLocation;

		Boolean IsSuccess;

		public CoinDropViewController (IntPtr handle) : base (handle)
		{
		}



		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			btnDropCoin.SetBackgroundImage (UIImage.FromBundle ("buttonSelected"), UIControlState.Highlighted);

			btnDropCoin.TouchUpInside += DropCoinTouchUpInside;

			animator = new UIDynamicAnimator(this.View);

			coinCatcherPush = new UIPushBehavior (new []{ivCoinCatcher}, UIPushBehaviorMode.Continuous);
			coinCatcherPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (0.25f, 0.0f);

			redGemPush = new UIPushBehavior (new []{ivRedGem}, UIPushBehaviorMode.Continuous);
			redGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (-0.15f, 0.0f);

			yellowGemPush = new UIPushBehavior (new []{ivYellowGem}, UIPushBehaviorMode.Continuous);
			yellowGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (0.35f, 0.0f);

			greenGemPush = new UIPushBehavior (new []{ivGreenGem}, UIPushBehaviorMode.Continuous);
			greenGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (-0.2f, 0.0f);

foreach (var item in View.Subviews) {
	if (item is UIImageView) {
		containerCollision.AddItem (item);
	}
}

containerCollision.BeganBoundaryContact += 
	(sender, e) => {
		

		if(e.DynamicItem == ivCoinCatcher)
			coinCatcherPush.PushDirection
				= new MonoTouch.CoreGraphics.CGVector(-coinCatcherPush.PushDirection.dx, -coinCatcherPush.PushDirection.dy);

		if(e.DynamicItem == ivRedGem)
			redGemPush.PushDirection
				= new MonoTouch.CoreGraphics.CGVector(-redGemPush.PushDirection.dx, -redGemPush.PushDirection.dy);

		if(e.DynamicItem == ivYellowGem)
			yellowGemPush.PushDirection
				= new MonoTouch.CoreGraphics.CGVector(-yellowGemPush.PushDirection.dx, -yellowGemPush.PushDirection.dy);


		if(e.DynamicItem == ivGreenGem)
			greenGemPush.PushDirection
				= new MonoTouch.CoreGraphics.CGVector(-greenGemPush.PushDirection.dx, -greenGemPush.PushDirection.dy);

		if(e.DynamicItem == ivGoldCoin){
			ResetCoin();
		}
	};

coinCollision = new UICollisionBehavior (ivCoinCatcher, ivGoldCoin);

coinCollision.BeganContact += 
	(sender, e) => {

	if(!IsSuccess){
		IsSuccess = true;

		ResetCoin();

		var message = new UIAlertView("A Winner Is You", String.Empty, null, null, new [] { "Great!" });
		message.Show();
	}
};

originalCoinLocation = new RectangleF(new PointF(ivGoldCoin.Frame.X, ivGoldCoin.Frame.Y), new SizeF(ivGoldCoin.Frame.Height, ivGoldCoin.Frame.Width));

animator.AddBehaviors (new UIDynamicBehavior[]{ coinCollision, coinCatcherPush, containerCollision, coinGravity, redGemPush, yellowGemPush, greenGemPush });
		}

		async void DropCoinTouchUpInside (object sender, EventArgs e)
		{
			IsSuccess = false;

			btnDropCoin.Enabled = false;
			coinGravity.AddItem (ivGoldCoin);
			await Task.Delay(500);
			btnDropCoin.Enabled = true;
		}

		private void ResetCoin(){

			coinGravity.RemoveItem(ivGoldCoin);

			ivGoldCoin.Frame = originalCoinLocation;

			animator.UpdateItemUsingCurrentState (ivGoldCoin);

		}
	}
}
