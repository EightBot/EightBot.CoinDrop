// This file has been autogenerated from a class added in the UI designer.

using System;

using MonoTouch.Foundation;
using MonoTouch.UIKit;
using System.Drawing;
using System.Threading.Tasks;

namespace EightBot.CoinDrop
{
	public partial class CoinDropViewController : UIViewController
	{
		public UIDynamicAnimator Animator { get; private set; }

		private UICollisionBehavior CoinCollider, ContainerCollision;

		private UIPushBehavior CoinCatcherPush, RedGemPush, GreenGemPush, YellowGemPush;

		private UIGravityBehavior CoinGravity { get; set; }

		private RectangleF OriginalCoinLocation;

		private RectangleF OriginalCoinCatcherLocation { get; set;}

		Boolean IsSuccess;

		public CoinDropViewController (IntPtr handle) : base (handle)
		{
		}



		public override void ViewDidLoad ()
		{
			base.ViewDidLoad ();

			btnDropCoin.SetBackgroundImage (UIImage.FromBundle ("buttonSelected"), UIControlState.Highlighted);

			btnDropCoin.TouchUpInside += DropCoinTouchUpInside;

			Animator = new UIDynamicAnimator(this.View);

			CoinGravity = new UIGravityBehavior ();

			CoinCatcherPush = new UIPushBehavior (new []{ivCoinCatcher}, UIPushBehaviorMode.Continuous);
			CoinCatcherPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (0.25f, 0.0f);

			RedGemPush = new UIPushBehavior (new []{ivRedGem}, UIPushBehaviorMode.Continuous);
			RedGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (-0.15f, 0.0f);

			YellowGemPush = new UIPushBehavior (new []{ivYellowGem}, UIPushBehaviorMode.Continuous);
			YellowGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (0.35f, 0.0f);

			GreenGemPush = new UIPushBehavior (new []{ivGreenGem}, UIPushBehaviorMode.Continuous);
			GreenGemPush.PushDirection = new MonoTouch.CoreGraphics.CGVector (-0.2f, 0.0f);

			ContainerCollision = new UICollisionBehavior () { TranslatesReferenceBoundsIntoBoundary = true };

			foreach (var item in View.Subviews) {
				if (item is UIImageView) {
					ContainerCollision.AddItem (item);
				}
			}

			ContainerCollision.BeganBoundaryContact += 
				(sender, e) => {
					
					BeginInvokeOnMainThread(() =>{

						if(e.DynamicItem == ivCoinCatcher)
							CoinCatcherPush.PushDirection
								= new MonoTouch.CoreGraphics.CGVector(-CoinCatcherPush.PushDirection.dx, CoinCatcherPush.PushDirection.dy);

						if(e.DynamicItem == ivRedGem)
							RedGemPush.PushDirection
								= new MonoTouch.CoreGraphics.CGVector(-RedGemPush.PushDirection.dx, RedGemPush.PushDirection.dy);


						if(e.DynamicItem == ivYellowGem)
							YellowGemPush.PushDirection
								= new MonoTouch.CoreGraphics.CGVector(-YellowGemPush.PushDirection.dx, YellowGemPush.PushDirection.dy);


						if(e.DynamicItem == ivGreenGem)
							GreenGemPush.PushDirection
								= new MonoTouch.CoreGraphics.CGVector(-GreenGemPush.PushDirection.dx, GreenGemPush.PushDirection.dy);

						if(e.DynamicItem == ivGoldCoin){
							Task.Delay(500);
							btnDropCoin.Enabled = true;
							ResetCoin();
						}
					});
				};

			CoinCollider = new UICollisionBehavior (ivCoinCatcher, ivGoldCoin);

			CoinCollider.BeganContact += 
				(sender, e) => {
				if(!IsSuccess){
					IsSuccess = true;

					ResetCoin();

					BeginInvokeOnMainThread(() => btnDropCoin.Enabled = true);

					var message = new UIAlertView("A Winner Is You", String.Empty, null, null, new [] { "Great!" });
					message.Show();
				}
			};

			OriginalCoinLocation = new RectangleF(new PointF(ivGoldCoin.Frame.X, ivGoldCoin.Frame.Y), new SizeF(ivGoldCoin.Frame.Height, ivGoldCoin.Frame.Width));

			Animator.AddBehaviors (new UIDynamicBehavior[]{ CoinCollider, CoinCatcherPush, ContainerCollision, CoinGravity, RedGemPush, YellowGemPush, GreenGemPush });
		}

		void DropCoinTouchUpInside (object sender, EventArgs e)
		{
			IsSuccess = false;

			btnDropCoin.Enabled = false;
			BeginInvokeOnMainThread(() => {
				CoinGravity.AddItem (ivGoldCoin);
			});
		}

		private void ResetCoin(){

			BeginInvokeOnMainThread(() => {
				CoinGravity.RemoveItem(ivGoldCoin);

				ivGoldCoin.Frame = OriginalCoinLocation;

				Animator.UpdateItemUsingCurrentState (ivGoldCoin);
			});


		}
	}
}
